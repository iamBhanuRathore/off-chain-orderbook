{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-4a7b-8c9d-1e2f3a4b5c6d",
    "name": "Matching Engine API",
    "description": "A collection of API requests for interacting with the Node.js/TypeScript API layer for the Rust Matching Engine.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "System",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Checks if the API server is running and responsive."
          },
          "response": []
        }
      ],
      "description": "Requests for checking the system status."
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Create Limit Buy Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"symbol\": \"{{trading_pair}}\",\n    \"userId\": 101,\n    \"orderType\": \"Limit\",\n    \"side\": \"Buy\",\n    \"price\": \"50000.75\",\n    \"quantity\": \"0.5\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "orders"]
            },
            "description": "Submits a new limit order to the matching engine. This order will be placed on the order book at the specified price."
          },
          "response": []
        },
        {
          "name": "Create Market Sell Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"symbol\": \"{{trading_pair}}\",\n    \"userId\": 102,\n    \"orderType\": \"Market\",\n    \"side\": \"Sell\",\n    \"quantity\": \"0.2\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "orders"]
            },
            "description": "Submits a market order to be executed immediately against the current order book at the best available prices. Note that the `price` field is omitted."
          },
          "response": []
        },
        {
          "name": "Create Invalid Order (Validation Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"symbol\": \"{{trading_pair}}\",\n    \"userId\": 103,\n    \"orderType\": \"Limit\",\n    \"side\": \"InvalidSide\",\n    \"quantity\": \"not_a_number\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "orders"]
            },
            "description": "This request is designed to fail the Zod validation in the API, returning a 400 Bad Request error with details."
          },
          "response": []
        },
        {
          "name": "Cancel an Order",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/orders/{{trading_pair}}/YOUR_ORDER_ID_HERE",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "orders", "{{trading_pair}}", "YOUR_ORDER_ID_HERE"]
            },
            "description": "Submits a request to cancel an existing order on the book.\n\n**IMPORTANT:** You must replace `YOUR_ORDER_ID_HERE` with the actual UUID of an order you have submitted. The UUID is generated by the Rust engine and is not returned by the POST /orders endpoint. You would typically get this ID from another source (e.g., your user's order history database)."
          },
          "response": []
        }
      ],
      "description": "Endpoints for creating and managing orders."
    },
    {
      "name": "Market Data",
      "item": [
        {
          "name": "Get Order Book",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/orderbook/{{trading_pair}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "orderbook", "{{trading_pair}}"]
            },
            "description": "Fetches the current aggregated order book for a given trading pair, showing the total quantity available at each price level for both bids and asks."
          },
          "response": []
        },
        {
          "name": "Get Ticker (Last Traded Price)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/ticker/{{trading_pair}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "ticker", "{{trading_pair}}"]
            },
            "description": "Retrieves the last price at which a trade occurred for the specified trading pair."
          },
          "response": []
        },
        {
          "name": "Get Recent Trades",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/trades/{{trading_pair}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "trades", "{{trading_pair}}"]
            },
            "description": "Fetches a list of the most recent trades that have been executed for the specified trading pair."
          },
          "response": []
        }
      ],
      "description": "Endpoints for retrieving public market data like order books and trade history."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "The base URL for the API server. Change the port if your .env file uses a different one."
    },
    {
      "key": "trading_pair",
      "value": "BTC_INR",
      "type": "string",
      "description": "The trading pair to use in requests. Make sure this matches a pair enabled in your markets.json file."
    }
  ]
}
