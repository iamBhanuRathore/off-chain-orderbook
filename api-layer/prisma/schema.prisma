datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  password       String
  // apiKey      String        @unique
  // apiSecret   String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  orders         Order[]
  balances       Balance[]
  tradesAsBuyer  Trade[]       @relation("BuyerTrades")
  tradesAsSeller Trade[]       @relation("SellerTrades")
  transactions   Transaction[]
}

model Asset {
  symbol     String   @id // e.g. "BTC", "USDT"
  name       String
  decimals   Int // number of decimals (e.g., 6 for USDC)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  baseAsset  Market[] @relation("BaseAsset")
  quoteAsset Market[] @relation("QuoteAsset")

  @@unique([symbol])
  @@index([symbol])
}

model Market {
  id          String   @id @default(uuid())
  symbol      String   @unique // e.g., "BTC_USDT"
  baseAsset   String // e.g., "BTC"
  quoteAsset  String // e.g., "USDT"
  base        Asset    @relation("BaseAsset", fields: [baseAsset], references: [symbol])
  quote       Asset    @relation("QuoteAsset", fields: [quoteAsset], references: [symbol])
  minPrice    Decimal
  maxPrice    Decimal
  tickSize    Decimal // minimum price increment
  minQuantity Decimal
  maxQuantity Decimal
  stepSize    Decimal // minimum quantity increment
  lastPrice   Decimal? @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fee         Fee?     @relation(fields: [symbol], references: [market])
}

model Balance {
  id        String   @id @default(uuid())
  userId    String
  asset     String
  amount    BigInt   @default(0)
  locked    BigInt   @default(0) // amount locked in orders
  decimal   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, asset])
  @@index([userId])
}

model Fee {
  id          String   @id @default(uuid())
  market      String
  makerFeeBps Int // e.g. 5 for 0.05%
  takerFeeBps Int // e.g. 10 for 0.1% e.g. 1 for 0.01%
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Market      Market?

  @@unique([market])
}

enum Side {
  Buy
  Sell
}

enum OrderStatus {
  Open
  Filled
  PartiallyFilled
  PartiallyCanceled
  Canceled
}

enum OrderType {
  Market
  Limit
  StopLimit
  StopMarket
}

enum TimeInForce {
  GTC // Good Till Canceled
  IOC // Immediate Or Cancel
  FOK // Fill Or Kill
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  market        String
  price         Decimal // for Market orders, you can ignore or set to 0
  quantity      Decimal
  filled        Decimal     @default(0) // how much has been filled
  remaining     Decimal // calculated field or stored
  side          Side
  status        OrderStatus @default(Open)
  orderType     OrderType   @default(Limit)
  timeInForce   TimeInForce @default(GTC)
  stopPrice     Decimal? // for stop orders
  averagePrice  Decimal? // average fill price
  clientOrderId String? // client-provided ID
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  canceledAt    DateTime?
  filledAt      DateTime?
  user          User        @relation(fields: [userId], references: [id])
  buyTrades     Trade[]     @relation("BuyOrderTrades")
  sellTrades    Trade[]     @relation("SellOrderTrades")

  @@index([userId])
  @@index([market, status])
  @@index([market, side, price])
  @@index([market, status, createdAt])
  @@index([clientOrderId])
}

model Trade {
  id          String   @id @default(uuid())
  market      String
  price       Decimal
  quantity    Decimal
  takerSide   Side // Which side was the taker for this trade
  buyOrderId  String
  sellOrderId String
  buyerId     String
  sellerId    String
  fee         BigInt // fee in lamports
  feeAsset    String // asset in which fee was charged
  timestamp   DateTime @default(now())
  buyOrder    Order    @relation("BuyOrderTrades", fields: [buyOrderId], references: [id])
  sellOrder   Order    @relation("SellOrderTrades", fields: [sellOrderId], references: [id])
  buyer       User     @relation("BuyerTrades", fields: [buyerId], references: [id])
  seller      User     @relation("SellerTrades", fields: [sellerId], references: [id])

  @@index([buyOrderId])
  @@index([sellOrderId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([market])
  @@index([market, timestamp])
}

model OrderBookSnapshot {
  id        String   @id @default(uuid())
  market    String
  bids      Json // [{price: "100", quantity: "1.5"}, ...]
  asks      Json // [{price: "101", quantity: "2.0"}, ...]
  timestamp DateTime @default(now())

  @@index([market, timestamp])
}

enum TransactionType {
  Deposit
  Withdrawal
  Trade
  Fee
  OrderLock
  OrderUnlock
}

enum TransactionStatus {
  Pending
  Completed
  Failed
}

model Transaction {
  id        String            @id @default(uuid())
  userId    String
  type      TransactionType
  asset     String
  amount    Decimal
  balance   Decimal // balance after transaction
  reference String? // reference to order/trade
  status    TransactionStatus @default(Pending)
  timestamp DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
  @@index([reference])
  @@index([status])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  details   Json
  timestamp DateTime @default(now())

  @@index([userId, timestamp])
  @@index([action])
}

// Market data and analytics
model MarketStats {
  id                    String   @id @default(uuid())
  market                String
  lastPrice             Decimal
  volume24h             Decimal
  high24h               Decimal
  low24h                Decimal
  priceChange24h        Decimal
  priceChangePercent24h Decimal
  bidPrice              Decimal
  askPrice              Decimal
  spread                Decimal
  timestamp             DateTime @default(now())

  @@unique([market, timestamp])
  @@index([market, timestamp])
}

enum CandlestickInterval {
  M1
  M5
  M15
  M30
  H1
  H4
  D1
  W1
  MN1
}

// Candlestick data for charts
model Candlestick {
  id        String              @id @default(uuid())
  market    String
  interval  CandlestickInterval
  openTime  DateTime
  closeTime DateTime
  open      Decimal
  high      Decimal
  low       Decimal
  close     Decimal
  volume    Decimal
  trades    Int // number of trades

  @@unique([market, interval, openTime])
  @@index([market, interval, openTime])
}
